# -*- coding: utf-8 -*-
"""l217512 cys an3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MsbcU3fl8NLtBJDE6uD4pT5VxTtISQh1
"""

import pandas as pd

# Read the data from the CSV file
data = pd.read_csv("cybersecurity_attacks.csv")

# Replace non-numeric values with 0
numeric_columns = ['Source Port', 'Destination Port', 'Packet Length', 'Anomaly Scores', 'Severity Level']
for column in numeric_columns:
    data[column] = pd.to_numeric(data[column], errors='coerce').fillna(0)

# Split the data into features (X) and target variable (y)
X = data.drop(columns=['Attack Type', 'Timestamp'])  # Excluding non-numeric and timestamp columns
y = data['Attack Type']

# Print the data types of all columns to ensure only numeric values are present
print(X.dtypes)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.neural_network import MLPClassifier


# Read the data from the CSV file
data = pd.read_csv("cybersecurity_attacks.csv")

# Replace null values with a dummy value (e.g., -1)
data.fillna(-1, inplace=True)

# Select columns with numeric data types
numeric_columns = data.select_dtypes(include=['int64', 'float64']).columns

# Exclude 'Attack Type' from numeric columns
numeric_columns = numeric_columns.drop('Attack Type', errors='ignore')

# Split the data into features (X) and target variable (y)
X = data[numeric_columns]
y = data['Attack Type']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Preprocessing: Standardize features by removing the mean and scaling to unit variance
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Machine Learning Techniques
# 1. Decision Trees
dt_classifier = DecisionTreeClassifier()
dt_classifier.fit(X_train_scaled, y_train)
dt_pred = dt_classifier.predict(X_test_scaled)
dt_accuracy = accuracy_score(y_test, dt_pred)
print("Decision Trees Accuracy:", dt_accuracy)

# 2. Random Forest
rf_classifier = RandomForestClassifier()
rf_classifier.fit(X_train_scaled, y_train)
rf_pred = rf_classifier.predict(X_test_scaled)
rf_accuracy = accuracy_score(y_test, rf_pred)
print("Random Forest Accuracy:", rf_accuracy)

# 3. Support Vector Machines (SVM)
svm_classifier = SVC()
svm_classifier.fit(X_train_scaled, y_train)
svm_pred = svm_classifier.predict(X_test_scaled)
svm_accuracy = accuracy_score(y_test, svm_pred)
print("SVM Accuracy:", svm_accuracy)

# 4. K-Nearest Neighbors (KNN)
knn_classifier = KNeighborsClassifier()
knn_classifier.fit(X_train_scaled, y_train)
knn_pred = knn_classifier.predict(X_test_scaled)
knn_accuracy = accuracy_score(y_test, knn_pred)
print("KNN Accuracy:", knn_accuracy)

# 5. Logistic Regression
lr_classifier = LogisticRegression()
lr_classifier.fit(X_train_scaled, y_train)
lr_pred = lr_classifier.predict(X_test_scaled)
lr_accuracy = accuracy_score(y_test, lr_pred)
print("Logistic Regression Accuracy:", lr_accuracy)

# 6. Gradient Boosting
gb_classifier = GradientBoostingClassifier()
gb_classifier.fit(X_train_scaled, y_train)
gb_pred = gb_classifier.predict(X_test_scaled)
gb_accuracy = accuracy_score(y_test, gb_pred)
print("Gradient Boosting Accuracy:", gb_accuracy)

# 7. Naive Bayes
nb_classifier = GaussianNB()
nb_classifier.fit(X_train_scaled, y_train)
nb_pred = nb_classifier.predict(X_test_scaled)
nb_accuracy = accuracy_score(y_test, nb_pred)
print("Naive Bayes Accuracy:", nb_accuracy)

# 8. Neural Networks
nn_classifier = MLPClassifier()
nn_classifier.fit(X_train_scaled, y_train)
nn_pred = nn_classifier.predict(X_test_scaled)
nn_accuracy = accuracy_score(y_test, nn_pred)
print("Neural Networks Accuracy:", nn_accuracy)